/****************************************************************
 * Copyright (c) Kaloom Inc., 2020
 *
 * This unpublished material is property of Kaloom Inc.
 * All rights reserved.
 * Reproduction or distribution, in whole or in part, is
 * forbidden except by express written permission of Kaloom Inc.
 *
 * sbug : set build user and group
 ****************************************************************/

buildscript {
    repositories {
        maven {
            url "${project.httpBin}/buildscript"
        }
        dependencies {
            classpath "io.kaloom.gradle:build-plugin:${gradleBuildPluginVersion}"
            classpath "io.kaloom.gradle:docker-plugin:${gradleDockerPluginVersion}"
        }
    }
}

plugins {
    id 'com.jfrog.artifactory' version '4.7.3'
    id "maven-publish"
    id 'pl.allegro.tech.build.axion-release' version '1.10.2'
}

apply plugin: 'io.kaloom.gradle.build-plugin'
apply plugin: 'io.kaloom.gradle.docker-plugin'

import io.kaloom.gradle.docker.tasks.DockerBuildImage

scmVersion {
    useHighestVersion = false
    repository {
        pushTagsOnly = true
        ignoreUncommittedChanges = false
    }
    tag {
        prefix='v'
        versionSeparator = ''
    }
    nextVersion {
        suffix = 'SNAPSHOT'
        separator = '-'
    }
}

version = scmVersion.version
group   'io.kaloom.tools'

defaultTasks 'build'

// Build the build container
task buildDockerImage(type: DockerBuildImage) {
    description 'Build the docker image (builder)'
    inputDir = file("${projectDir}/contrib/build-env")
    dockerFile = file("${inputDir.get()}/Dockerfile-sbug")
    buildArgs = [BUILD_USER_ID: "${["id", "-u"].execute().text.trim()}",
                 BUILD_GROUP_ID: "${["id", "-g"].execute().text.trim()}"]
	pull = true
	remove = true
}

// Cleanup using the build container
task clean {
    description 'Clean the project'
    dependsOn buildDockerImage
    doLast {
        exec {
            workingDir "${projectDir}"
            commandLine 'docker', 'run', '--rm', '--privileged', \
                '-v', "${projectDir}:/home/build/src", \
                "${buildDockerImage.getImageId().get()}", \
                'bash', '-c', 'cd /home/build/src/build-config && make clean'
        }
        // Restore the original install.sh
        // 'git restore' is a fairly recent command so use the venerable 'git checkout' instead
        exec {
            workingDir "${projectDir}"
            commandLine 'git', 'checkout', '--', 'demo/installer/grub-arch/install.sh'
        }
    }
}

// Build the Onie Probe (and the PXE material as a side-effect)
task buildOnieProbe {
    description 'Build the ONIE probe'
    dependsOn buildDockerImage
    doLast {
        exec {
            workingDir "${projectDir}"
            commandLine 'docker', 'run', '--rm', '--privileged', \
                '-v', "${projectDir}:/home/build/src", \
                "${buildDockerImage.getImageId().get()}", \
                'bash', '-c', 'cd /home/build/src/build-config && make -j4 all demo'
        }
        // Restore the original install.sh
        // 'git restore' is a fairly recent command so use the venerable 'git checkout' instead
        exec {
            workingDir "${projectDir}"
            commandLine 'git', 'checkout', '--', 'demo/installer/grub-arch/install.sh'
        }
    }
}

// Prepare the folder for the final tar
task prepareTarFolder {
    description 'Prepare tar folder'
    dependsOn buildOnieProbe

    doFirst {
        exec {
            workingDir "${buildDir}"
            commandLine 'rm', '-rf', 'probes'
        }
        exec {
            workingDir "${buildDir}"
            commandLine 'mkdir', 'probes'
        }
    }

    doLast {
        exec {
            workingDir "${buildDir}/probes"
            commandLine 'ln', '-s', '../images/demo-diag-installer-x86_64-kaloom_node_probe-r0.bin', 'onie-probe'
        }
        exec {
            workingDir "${buildDir}/probes"
            commandLine 'ln', '-s', '../images/kaloom_node_probe-r0.vmlinuz', 'pxe-probe-vmlinuz'
        }
        exec {
            workingDir "${buildDir}/probes"
            commandLine 'ln', '-s', '../kaloom_node_probe-r0/demo.initrd', 'pxe-probe-initrd.img'
        }
    }
}

task build(type: Tar) {
    description 'Make the final assembly'
    dependsOn buildOnieProbe
    dependsOn prepareTarFolder

    from "${buildDir}/probes"
    into "onie-probe"

    baseName "onie-probe"
    extension "tgz"
    compression Compression.GZIP
    destinationDir file("${buildDir}")
}

publishing {
    publications {
        binaries(MavenPublication) {
            artifact(
                    source: "${buildDir}/onie-probe.tgz",
                    extension: "tgz"
            )
        }
    }
}

artifactory {
    publish {
        defaults {
            publications(publishing.publications.binaries)
        }
    }
}
